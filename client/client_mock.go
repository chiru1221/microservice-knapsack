// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	knapsack "github.com/chiru1221/microservice-knapsack/knapsack"
	gomock "github.com/golang/mock/gomock"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CallHealth mocks base method.
func (m *MockClient) CallHealth(service string) (*grpc_health_v1.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallHealth", service)
	ret0, _ := ret[0].(*grpc_health_v1.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallHealth indicates an expected call of CallHealth.
func (mr *MockClientMockRecorder) CallHealth(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallHealth", reflect.TypeOf((*MockClient)(nil).CallHealth), service)
}

// CallUpdate mocks base method.
func (m *MockClient) CallUpdate(knapsackDP *knapsack.KnapsackDP) (*knapsack.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallUpdate", knapsackDP)
	ret0, _ := ret[0].(*knapsack.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallUpdate indicates an expected call of CallUpdate.
func (mr *MockClientMockRecorder) CallUpdate(knapsackDP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallUpdate", reflect.TypeOf((*MockClient)(nil).CallUpdate), knapsackDP)
}

// Construct mocks base method.
func (m *MockClient) Construct() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Construct")
	ret0, _ := ret[0].(error)
	return ret0
}

// Construct indicates an expected call of Construct.
func (mr *MockClientMockRecorder) Construct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Construct", reflect.TypeOf((*MockClient)(nil).Construct))
}

// Destruct mocks base method.
func (m *MockClient) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct.
func (mr *MockClientMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockClient)(nil).Destruct))
}
